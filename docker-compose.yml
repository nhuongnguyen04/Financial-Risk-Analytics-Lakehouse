version: '3.9'
services:
  kafka:
    image: apache/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "true"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092, CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-net
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8083:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-net

  postgres:
    image: postgres:16.3
    restart: always
    environment:
      POSTGRES_USER: iceberg
      POSTGRES_PASSWORD: iceberg
      POSTGRES_DB: iceberg_catalog
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-net

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" 
      - "9001:9001"
    volumes:
      - ./lakehouse:/data
    networks:
      - app-net
  
  spark:
    build: .
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark
      - SPARK_MASTER_PORT=7077
      - SPARK_UI_PORT=8080
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=python3
      - KAGGLE_CONFIG_DIR=/tmp/kaggle
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:  
      - ./data:/opt/spark/data
      - ./lakehouse:/opt/spark/lakehouse
      - ./scripts:/opt/spark/scripts
      - ./kaggle.json:/tmp/kaggle/kaggle.json:ro
    command: tail -f /dev/null
    networks:
      - app-net
  
  spark-worker:
    build: .
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_PORT=7078
      - SPARK_WORKER_WEBUI_PORT=8082
      - KAGGLE_CONFIG_DIR=/tmp/kaggle
    depends_on:
      - spark
    ports:
      - "8082:8082"
    volumes:
      - ./data:/opt/spark/data
      - ./lakehouse:/opt/spark/lakehouse
      - ./scripts:/opt/spark/scripts
      - ./kaggle.json:/tmp/kaggle/kaggle.json:ro
    command: tail -f /dev/null
    networks:
      - app-net
  
  producer:
    build:
      context: .
      dockerfile: ./scripts/producer.Dockerfile
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    command: python3 /app/producer.py
    networks:
      - app-net

volumes:
  pg_data:    
  kafka_data:

networks:
  app-net:
    driver: bridge
  
