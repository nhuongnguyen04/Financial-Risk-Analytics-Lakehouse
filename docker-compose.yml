version: '3.9'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/finance-db
    AIRFLOW_DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/finance-db
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@postgres:5432/finance-db
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./lakehouse:/opt/airflow/lakehouse
    - ./data:/opt/airflow/data
    - ./scripts:/opt/airflow/scripts
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - app-net


services:
  kafka:
    image: apache/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "true"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092, CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-net
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8083:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - app-net

  postgres:
    image: postgres:16.3
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: finance-db
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init/init-airflow-db.sql:/docker-entrypoint-initdb.d/init-airflow-db.sql
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 5s
  
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" 
      - "9001:9001"
    volumes:
      - ./lakehouse:/data
    networks:
      - app-net
  
  spark:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark
      - SPARK_MASTER_PORT=7077
      - SPARK_UI_PORT=8080
      - PYSPARK_PYTHON=python3
      - PYSPARK_DRIVER_PYTHON=python3
      - KAGGLE_CONFIG_DIR=/tmp/kaggle
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:  
      - ./data:/opt/spark/data
      - ./lakehouse:/opt/spark/lakehouse
      - ./scripts:/opt/spark/scripts
      - ./checkpoints:/opt/spark/checkpoints
      - ./logs:/opt/spark/logs
      - ./kaggle.json:/tmp/kaggle/kaggle.json:ro
    command: tail -f /dev/null
    networks:
      - app-net
  
  spark-worker:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_PORT=7078
      - SPARK_WORKER_WEBUI_PORT=8082
      - KAGGLE_CONFIG_DIR=/tmp/kaggle
    depends_on:
      - spark
    ports:
      - "8082:8082"
    volumes:
      - ./data:/opt/spark/data
      - ./lakehouse:/opt/spark/lakehouse
      - ./scripts:/opt/spark/scripts
      - ./checkpoints:/opt/spark/checkpoints
      - ./logs:/opt/spark/logs
      - ./kaggle.json:/tmp/kaggle/kaggle.json:ro
    command: tail -f /dev/null
    networks:
      - app-net
  
  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    command: python3 /app/producer.py
    networks:
      - app-net
  
  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - app-net
  
  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl", "--fail", "http://localhost:8080/api/v2/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-net
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-net
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8084:8080"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-net
  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-net
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      airflow-apiserver:
        condition: service_healthy
    networks:
      - app-net
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-net
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash 
    command: -c "/opt/airflow/scripts/init_airflow.sh"
    volumes:
      - ./scripts/init_airflow.sh:/opt/airflow/scripts/init_airflow.sh
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    networks:
      - app-net
  
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app-net

volumes:
  pg_data:    
  kafka_data:

networks:
  app-net:
    driver: bridge
  
